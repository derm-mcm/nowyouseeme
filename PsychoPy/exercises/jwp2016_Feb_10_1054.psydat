ccopy_reg
_reconstructor
p1
(cpsychopy.data
StairHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'origin'
p6
V#!/usr/bin/env python2.7\u000a\u000a"""measure your JND in orientation using a staircase method"""\u000a\u000afrom psychopy import core, visual, data, event, gui\u000afrom psychopy.tools.filetools import fromFile, toFile\u000aimport time, numpy, random\u000a\u000atry:#try to get a previous parameters file\u000a    expInfo = fromFile('lastParams.pickle')\u000aexcept:#if not there then use a default set\u000a    expInfo = {'observer':'jwp', 'refOrientation':0}\u000aexpInfo['dateStr']= data.getDateStr() #add the current time\u000a#present a dialogue to change params\u000adlg = gui.DlgFromDict(expInfo, title='simple JND Exp', fixed=['dateStr'])\u000aif dlg.OK:\u000a    toFile('lastParams.pickle', expInfo)#save params to file for next time\u000aelse:\u000a    core.quit()#the user hit cancel so exit\u000a\u000a#make a text file to save data\u000afileName = expInfo['observer'] + expInfo['dateStr']\u000adataFile = open(fileName+'.csv', 'w')#a simple text file with 'comma-separated-values'\u000adataFile.write('targetSide,oriIncrement,correct\u005cn')\u000a\u000a#create the staircase handler\u000astaircase = data.StairHandler(startVal = 20.0,\u000a                          stepType = 'db', stepSizes=[8,4,4,2,2,1,1],\u000a                          nUp=1, nDown=3,  #will home in on the 80% threshold\u000a                          nTrials=1)\u000a\u000a#create window and stimuli\u000awin = visual.Window([800,600],allowGUI=True, monitor='testMonitor', units='deg')\u000afoil = visual.GratingStim(win, sf=1, size=4, mask='gauss', ori=expInfo['refOrientation'])\u000atarget = visual.GratingStim(win, sf=1, size=4, mask='gauss', ori=expInfo['refOrientation'])\u000afixation = visual.GratingStim(win, color=-1, colorSpace='rgb', tex=None, mask='circle',size=0.2)\u000a#and some handy clocks to keep track of time\u000aglobalClock = core.Clock()\u000atrialClock = core.Clock()\u000a\u000a#display instructions and wait\u000amessage1 = visual.TextStim(win, pos=[0,+3],text='Hit a key when ready.')\u000amessage2 = visual.TextStim(win, pos=[0,-3],\u000a    text="Then press left or right to identify the %.1f deg probe." %expInfo['refOrientation'])\u000amessage1.draw()\u000amessage2.draw()\u000afixation.draw()\u000awin.flip()#to show our newly drawn 'stimuli'\u000a#pause until there's a keypress\u000aevent.waitKeys()\u000a\u000afor thisIncrement in staircase: #will step through the staircase\u000a    #set location of stimuli\u000a    targetSide= random.choice([-1,1]) #will be either +1(right) or -1(left)\u000a    foil.setPos([-5*targetSide, 0])\u000a    target.setPos([5*targetSide, 0]) #in other location\u000a\u000a    #set orientation of probe\u000a    foil.setOri(expInfo['refOrientation'] + thisIncrement)\u000a\u000a    #draw all stimuli\u000a    foil.draw()\u000a    target.draw()\u000a    fixation.draw()\u000a    win.flip()\u000a\u000a    core.wait(0.5) #wait 500ms; but use a loop of x frames for more accurate timing in fullscreen\u000a                              # eg, to get 30 frames: for f in xrange(30): win.flip()\u000a    #blank screen\u000a    fixation.draw()\u000a    win.flip()\u000a\u000a    #get response\u000a    thisResp=None\u000a    while thisResp==None:\u000a        allKeys=event.waitKeys()\u000a        for thisKey in allKeys:\u000a            if thisKey=='left':\u000a                if targetSide==-1: thisResp = 1#correct\u000a                else: thisResp = -1             #incorrect\u000a            elif thisKey=='right':\u000a                if targetSide== 1: thisResp = 1#correct\u000a                else: thisResp = -1             #incorrect\u000a            elif thisKey in ['q', 'escape']:\u000a                core.quit() #abort experiment\u000a        event.clearEvents() #must clear other (eg mouse) events - they clog the buffer\u000a\u000a    #add the data to the staircase so it can calculate the next level\u000a    staircase.addData(thisResp)\u000a    dataFile.write('%i,%.3f,%i\u005cn' %(targetSide, thisIncrement, thisResp))\u000a    core.wait(1)\u000a\u000a#staircase has ended\u000adataFile.close()\u000astaircase.saveAsPickle(fileName) #special python binary file to save all the info\u000a\u000a#give some output to user in the command line in the output window\u000aprint 'reversals:'\u000aprint staircase.reversalIntensities\u000aprint 'mean of final 6 reversals = %.3f' %(numpy.average(staircase.reversalIntensities[-6:]))\u000a\u000a#give some on screen feedback\u000afeedback1 = visual.TextStim(win, pos=[0,+3],\u000a    text='mean of final 6 reversals = %.3f' %\u000a(numpy.average(staircase.reversalIntensities[-6:])))\u000afeedback1.draw()\u000afixation.draw()\u000awin.flip()\u000aevent.waitKeys() #wait for participant to respond\u000a\u000awin.close()\u000acore.quit()\u000a
p7
sS'nDown'
p8
I3
sS'_exp'
p9
NsS'reversalIntensities'
p10
(lp11
F0.079621434110699454
aF0.50237728630191625
aF0.3169786384922228
aF0.39905246299377606
aF0.3169786384922228
aF0.44774422771366795
aF0.399052462993776
asS'stepSizes'
p12
(lp13
I8
aI4
aI4
aI2
aI2
aI1
aI1
asS'nUp'
p14
I1
sS'startVal'
p15
F20
sS'_nextIntensity'
p16
F0.44774422771366795
sS'_warnUseOfNext'
p17
I01
sS'method'
p18
S'2AFC'
p19
sS'maxVal'
p20
NsS'stepSizeCurrent'
p21
I1
sS'correctCounter'
p22
I0
sS'nReversals'
p23
I7
sS'minVal'
p24
NsS'otherData'
p25
(dp26
sS'finished'
p27
I01
sS'stepType'
p28
S'db'
p29
sS'data'
p30
(lp31
I1
aI1
aI1
aI1
aI1
aI1
aI-1
aI-1
aI1
aI1
aI-1
aI1
aI1
aI-1
aI1
aI1
aI1
aI-1
aI1
aI1
aI1
aI1
aI1
aI-1
aI-1
aI-1
aI1
aI1
aI1
aI1
aI-1
asS'reversalPoints'
p32
(lp33
I6
aI16
aI17
aI20
aI23
aI28
aI30
asS'originPath'
p34
S'/Users/derm/Documents/PhD/PsychoPy/exercises/tut_2_complete.py'
p35
sS'name'
p36
S''
sS'extraInfo'
p37
NsS'currentDirection'
p38
S'up'
p39
sS'_variableStep'
p40
I01
sS'intensities'
p41
(lp42
F20
aF7.9621434110699454
aF3.1697863849222272
aF1.2619146889603865
aF0.50237728630191603
aF0.20000000000000001
aF0.079621434110699454
aF0.12619146889603866
aF0.20000000000000004
aF0.20000000000000004
aF0.20000000000000004
aF0.3169786384922228
aF0.3169786384922228
aF0.3169786384922228
aF0.50237728630191625
aF0.50237728630191625
aF0.50237728630191625
aF0.3169786384922228
aF0.39905246299377606
aF0.39905246299377606
aF0.39905246299377606
aF0.3169786384922228
aF0.3169786384922228
aF0.3169786384922228
aF0.35565588200778464
aF0.399052462993776
aF0.44774422771366795
aF0.44774422771366795
aF0.44774422771366795
aF0.399052462993776
aF0.399052462993776
asS'initialRule'
p43
I0
sS'nTrials'
p44
I1
sS'thisTrialN'
p45
I30
sS'autoLog'
p46
I01
sb.